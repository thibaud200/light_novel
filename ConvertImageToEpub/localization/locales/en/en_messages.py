# Messages for orchestrator.py
ORCHESTRATOR_START = "--- Starting Book Processing Orchestrator (PARALLELIZED) ---"
GLOBAL_BOOKS_ROOT_DIR_MSG = "Global book directory: {}"
MAX_CONCURRENT_CHAPTER_UNITS_MSG = "Chapter units processed in parallel: {}"
LOADING_RESUME_POINTS = "Loading resume points for {} books."
BOOK_MARKED_AS_PROCESSED = "  Book '{}': Marked as ENTIRELY PROCESSED."
LAST_PROCESSED_CHAPTER = "  Book '{}': Last chapter processed '{}'"
PROGRESS_FILE_CORRUPTED = "WARNING: The progress file '{}' is corrupted or empty. Restarting from scratch for all books."
NO_RESUME_POINT_FOUND = "No resume point found. Starting full processing."
IGNORED_NON_DIRECTORY = "IGNORED (non-directory root item): '{}'."
IGNORED_EXCLUDED_DIR = "IGNORED: The directory '{}' is excluded by name."
BOOK_MARKED_AS_PROCESSED_SKIP = "Book '{}' marked as ENTIRELY PROCESSED. SKIPPING CHAPTER TRAVERSAL."
START_DETECTION_BOOK = "Starting detection for book/folder: {}"
BOOK_FOLDER_PATH = "Book folder path: {}"
IGNORED_SYSTEM_SUBFOLDER = "  IGNORED (system or excluded subfolder): '{}'"
IGNORED_NON_CBZ_FILE = "  IGNORED (non-CBZ file in book folder): '{}'"
CBZ_DETECTED = "  Detected a CBZ file in the book folder: '{}'. Attempting extraction..."
CBZ_EXTRACTED = "  CBZ '{}' extracted and its folder added to the processing list."
CBZ_EXTRACTION_FAILED = "  FAILED to extract CBZ '{}'. This chapter will be ignored."
NO_CHAPTER_UNIT_FOUND = "NO chapter unit (folder or CBZ) found for the book: '{}'."
RESUME_POINT_DETECTED = "  Resume point detected for '{}': '{}'."
RESUMING_AFTER_CHAPTER = "    Resuming AFTER chapter '{}'."
IGNORED_ALREADY_PROCESSED = "    IGNORED (already processed): '{}'."
RESUME_POINT_NOT_FOUND = "WARNING: The last processed chapter '{}' was not found in the current list of chapters for '{}'. Resuming from the first unprocessed chapter (if it exists)."
RESUME_POINT_NOT_FOUND_NO_MORE = "WARNING: Resume point '{}' not found and no more chapters to process. Book potentially incomplete."
ALL_CHAPTERS_ALREADY_PROCESSED = "  All chapters of '{}' have already been processed or no new chapters to submit."
SUBMITTING_CHAPTERS = "Submitting {} chapter units for '{}' to the processing pool..."
ALL_TASKS_SUBMITTED = "--- All chapter processing tasks submitted. Waiting for completion... ---"
START_POST_PROCESSING = "--- Starting book post-processing phase ---"
BOOK_POST_PROCESSING_STARTED = "--- BOOK '{}': All chapters processed in this session. Post-processing phase started. ---"
BOOK_INCOMPLETE_SKIP = "--- BOOK '{}' INCOMPLETE. Post-processing phase skipped. ---"
ALL_BOOKS_FINISHED = "--- All detected and processed books have been finished ---"
CHECK_LOG_FILES = "Check the main log file '{}' and specific logs in each chapter unit."
ERRORS_LOGGED = "Errors are logged in '{}'."
RESUME_POINTS_LOGGED = "Resume points are in '{}'."
PROCESSING_STARTED = "{} Starting processing."
FINAL_TXT_FOUND = "{} Final TXT file(s) already present in '{}'. Skipping full processing."
PROCESSING_SKIPPED_FINAL = "{} Chapter unit processing skipped (final file already present)."
CLEANED_FILES_FOUND = "{} Cleaned file(s) already present in '{}'. Skipping full processing."
PROCESSING_SKIPPED_CLEANED = "{} Chapter unit processing skipped (cleaned file already present)."
RAW_OCR_FOUND_RESUME = "{} Raw OCR file(s) already present in '{}'. Resuming from the cleaning step."
STOP_CLEAN_FAIL = "{} Stopping due to text cleaning failure."
PROCESSING_RESUMED_CLEANING = "{} Chapter unit processing finished (resuming from cleaning)."
NO_OUTPUT_FOUND = "{} No output file found. Starting full processing."
STOP_SPLIT_FAIL = "{} Stopping due to image splitting failure."
STOP_OCR_FAIL = "{} Stopping due to OCR failure."
PROCESSING_FINISHED = "{} Chapter unit processing finished."
EXECUTING_SCRIPT = "--- Executing {} for '{}' ---"
SCRIPT_OUTPUT = "  Output from {}:\n{}"
SCRIPT_WARNING = "  Error/Warning from {}:\n{}"
SCRIPT_SUCCESS = "--- {} finished successfully. ---"
SCRIPT_FAILED = "!!! ERROR: {} failed for '{}' !!!"
SCRIPT_NOT_FOUND = "!!! CRITICAL ERROR: {} not found !!!"
UNEXPECTED_ERROR = "!!! UNEXPECTED ERROR during execution of {}: {} !!!"
CLEANING_INTERMEDIATE_FILES = "  Cleaning intermediate files for '{}'..."
FOLDER_DELETED = "    Folder deleted: {}"
ERROR_DELETING_FOLDER = "    ERROR while deleting {}: {}"
FOLDER_NOT_FOUND = "    Folder '{}' not found, no cleanup needed."
CLEANUP_FINISHED_FOR = "  Cleanup finished for '{}'."
START_COLLECTING_FINAL_TXT = "--- Starting collection of final TXT files for book: {} ---"
COPIED_TO_FINAL_FOLDER = "    Copied '{}' from '{}' to the final folder."
ERROR_COPYING_FILE = "    ERROR while copying '{}': {}"
CLEANED_TXT_FOLDER_NOT_FOUND = "    Folder '{}' not found for '{}'."
FINAL_TXT_COLLECTION_FINISHED = "--- Collection of {} final TXT files finished for book: {} ---"
BOOK_COMPLETE_PROCESSING_MSG = "Complete processing of book: {}"
# Messages for cleanup_script.py
START_CLEANUP_SCRIPT = "--- Starting cleanup script ---"
ROOT_DIR_TO_CLEAN = "Root directory to clean: {}"
DELETE_UNZIPPED_ENABLED = "Deletion of _unzipped folders enabled: {}"
PREVIOUS_LOG_DELETED = "Previous log file '{}' deleted."
CLEANUP_FINISHED = "--- Cleanup finished! ---"
TOTAL_PROCESSED_FOLDERS = "Total book folders processed: {}"
TOTAL_SKIPPED_FOLDERS = "Total book folders skipped: {}"
CHECK_LOG_DETAILS = "Check the file '{}' for operation details."
FOLDER_DELETED_CLEANUP = "    Folder deleted: {}"
ERROR_DELETING_FOLDER_CLEANUP = "    ERROR while deleting {}: {}"
FOLDER_NOT_FOUND_CLEANUP = "    Folder '{}' not found, no cleanup needed."
IGNORED_NON_DIR_CLEANUP = "IGNORED (non-directory root item): '{}'."
IGNORED_EXCLUDED_DIR_CLEANUP = "IGNORED (folder excluded by name): '{}'."
CLEANING_BOOK_FOLDER = "Cleaning book/folder: {}"
IGNORED_SYSTEM_SUBFOLDER_CLEANUP = "  IGNORED (system or excluded subfolder): '{}'"
PROCESSING_CHAPTER_UNIT = "  -> Processing chapter unit: {}"
DELETING_UNZIPPED_FOLDER = "    Deleting _unzipped folder: {}"
# Messages for extract_cbz.py
EXTRACTION_FOLDER_EXISTS = "  Extraction folder '{}' already exists. Deleting existing content for re-extraction."
EXTRACTING_CBZ = "  Extracting '{}' to '{}'..."
RENAMED_FOR_COMPATIBILITY = "    Renamed '{}' to '1.png' for compatibility."
EXTRACTION_FINISHED = "  Extraction of '{}' finished."
CBZ_CORRUPTED = "The CBZ file is corrupted or invalid."
UNEXPECTED_EXTRACTION_ERROR = "Unexpected error during extraction: {}"
CBZ_FILE_HELP = "Path to the CBZ file to extract."
OUTPUT_PARENT_DIR_HELP = "Parent directory where to extract the content (the book folder)."
CONTENT_EXTRACTED_TO = "Content extracted to: {}"
EXTRACTION_FAILED = "Failed to extract the CBZ."
# Messages for split_large_images.py
SCRIPT_DESCRIPTION = "Script to split large images into manageable segments for OCR of a SINGLE chapter unit."
CHAPTER_UNIT_HELP = "Path to the chapter unit directory (e.g., C:\\novel\\MonLivre\\Chapter 01 or C:\\novel\\MonLivre\\MonArchive_unzipped)."
OUTPUT_FOLDER_CREATED = "Output folder for split images created: {}"
PREVIOUS_LOG_DELETED = "Previous log file '{}' deleted."
START_SPLITTING = "Starting splitting/preparation for unit: {}"
IMAGES_WILL_BE_SAVED_IN = "Split images will be saved in: {}"
MAX_HEIGHT_ALLOWED = "Maximum allowed height: {} pixels"
TARGET_FILE_NOT_FOUND = "The target file '{}' with a supported extension was not found in the chapter unit. Extensions searched: {}"
IMAGE_MANAGEABLE_SIZE = "  Image '{}' has a manageable size ({}x{}). Copying without splitting."
IMAGE_TOO_LARGE = "  Image '{}' is too large ({}x{}). Splitting into segments..."
SAVED_SEGMENT = "    Saved: {}"
SPLITTING_FINISHED = "  Splitting finished: {} segments created for '{}'."
ERROR_DURING_PROCESSING = "Error during processing: {}"
IMAGE_PREPARATION_FINISHED = "--- Image preparation process for '{}' finished ---"
CHECK_LOG_FOR_ERRORS = "Check the file '{}' for errors."
# Messages for clean_ocr_text.py
SCRIPT_DESCRIPTION = "Script to clean OCR text of a SINGLE chapter unit."
CHAPTER_UNIT_HELP = "Path to the chapter unit directory (e.g., C:\\novel\\MonLivre\\Chapter 01 or C:\\novel\\MonLivre\\MonArchive_unzipped)."
OUTPUT_FOLDER_CREATED = "Output folder for cleaned texts created: {}"
PREVIOUS_LOG_DELETED = "Previous log file '{}' deleted."
START_POST_PROCESSING = "Starting text post-processing for unit: {}"
CLEANED_FILES_SAVED = "Cleaned files will be saved in: {}"
INPUT_FOLDER_NOT_FOUND = "OCR texts folder '{}' not found in the chapter unit."
WARNING_NOT_TXT = "  WARNING: '{}' is not a .txt file and will be ignored."
PROCESSING_FILE = "Processing file: {}"
CLEANING_SUCCESSFUL = "  Cleaning successful: '{}' -> '{}'"
ERROR_WHILE_CLEANING = "Error while cleaning '{}': {}"
POST_PROCESSING_FINISHED = "--- Text post-processing for '{}' finished ---"
CHECK_LOG_FOR_ERRORS = "Check the file '{}' for errors."
# Messages for OCR.py
SCRIPT_DESCRIPTION = "Script to perform OCR on images of a SINGLE chapter unit."
CHAPTER_UNIT_HELP = "Path to the chapter unit directory (e.g., C:\\novel\\MonLivre\\Chapter 01 or C:\\novel\\MonLivre\\MonArchive_unzipped)."
OUTPUT_FOLDER_CREATED = "Output folder created: {}"
PREVIOUS_LOG_DELETED = "Previous log file '{}' deleted."
START_OCR = "Starting OCR for unit: {}"
TEXT_FILES_SAVED = "Text files will be saved in: {}"
OCR_LANGUAGE = "OCR Language: {}"
INPUT_FOLDER_NOT_FOUND = "Processed images folder '{}' not found in the chapter unit."
IGNORED_ORIGINAL_FILES = "    IGNORED (original files): {}"
PNG_FILES_TO_PROCESS = "    PNG files to process for {}: {}"
NO_PNG_FILES_FOUND = "No PNG files found in the folder '{}' (after excluding _original.png)."
OCR_SUCCESS = "    OCR successful on segment: {}"
TESSERACT_NOT_FOUND = "Tesseract is not found. Make sure it is installed and its path is configured correctly."
CRITICAL_TESSERACT_ERROR = "Tesseract not found. Stopping processing for this chapter."
UNEXPECTED_PROCESSING_ERROR = "Unexpected error during processing: {}"
OCR_SEGMENT_ERROR = "OCR Error on this segment: {}"
CHAPTER_NUMBER_NOT_FOUND = "Chapter number not found at the beginning of unit '{}'. The file name will be based on the full unit name."
PROCESSING_COMPLETE = "  Complete processing of unit '{}' -> '{}'"
OCR_FINISHED = "--- OCR processing for '{}' finished ---"
CHECK_LOG_FOR_ERRORS = "Check the file '{}' for errors."